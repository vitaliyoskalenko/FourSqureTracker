//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.voskalenko.foursquretracker.task;

import android.app.Activity;
import android.content.Context;
import android.util.Log;
import android.view.View;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import com.voskalenko.foursquretracker.callback.GetAllCheckInCallback;
import com.voskalenko.foursquretracker.callback.GetNearestVenuesCallback;
import com.voskalenko.foursquretracker.callback.GetTokenCallback;
import com.voskalenko.foursquretracker.callback.LikeCheckInCallback;
import com.voskalenko.foursquretracker.callback.UserCallback;

public final class ApiClient_
    extends ApiClient
{

    private Context context_;
    private static ApiClient_ instance_;

    private ApiClient_(Context context) {
        context_ = context;
        init_();
    }

    public void afterSetContentView_() {
        if (!(context_ instanceof Activity)) {
            return ;
        }
    }

    /**
     * You should check that context is an activity before calling this method
     * 
     */
    public View findViewById(int id) {
        Activity activity_ = ((Activity) context_);
        return activity_.findViewById(id);
    }

    @SuppressWarnings("all")
    private void init_() {
        if (context_ instanceof Activity) {
            Activity activity = ((Activity) context_);
        }
        service = new NetworkService_();
        ctx = context_;
        init();
    }

    public static ApiClient_ getInstance_(Context context) {
        if (instance_ == null) {
            instance_ = new ApiClient_(context.getApplicationContext());
        }
        return instance_;
    }

    public void rebind(Context context) {
    }

    @Override
    public void getUserTask(final UserCallback callback) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    ApiClient_.super.getUserTask(callback);
                } catch (RuntimeException e) {
                    Log.e("ApiClient_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void getNearestVenuesTask(final String token, final double longitude, final double latitude, final GetNearestVenuesCallback callback) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    ApiClient_.super.getNearestVenuesTask(token, longitude, latitude, callback);
                } catch (RuntimeException e) {
                    Log.e("ApiClient_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void getAllCheckInTask(final String token, final GetAllCheckInCallback callback) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    ApiClient_.super.getAllCheckInTask(token, callback);
                } catch (RuntimeException e) {
                    Log.e("ApiClient_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void likeCheckInTask(final String checkInId, final LikeCheckInCallback callback) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    ApiClient_.super.likeCheckInTask(checkInId, callback);
                } catch (RuntimeException e) {
                    Log.e("ApiClient_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void getAccessToken(final String verifyCode, final GetTokenCallback callback) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    ApiClient_.super.getAccessToken(verifyCode, callback);
                } catch (RuntimeException e) {
                    Log.e("ApiClient_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

}
