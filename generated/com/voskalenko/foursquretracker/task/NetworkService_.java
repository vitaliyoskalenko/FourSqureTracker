//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.voskalenko.foursquretracker.task;

import java.util.HashMap;
import com.voskalenko.foursquretracker.model.CheckIn;
import com.voskalenko.foursquretracker.model.CheckInsResp;
import com.voskalenko.foursquretracker.model.Token;
import com.voskalenko.foursquretracker.model.User;
import com.voskalenko.foursquretracker.model.VenuesResp;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

public class NetworkService_
    implements NetworkService
{

    private RestTemplate restTemplate;
    private String rootUrl;

    public NetworkService_() {
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        rootUrl = "";
    }

    @Override
    public RestTemplate getRestTemplate() {
        return restTemplate;
    }

    @Override
    public void setRootUrl(String url) {
        this.rootUrl = url;
    }

    @Override
    public ResponseEntity<User> getUserProfile(String version) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("version", version);
        HttpHeaders httpHeaders = new HttpHeaders();
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("/v2/users/self?v={version}"), HttpMethod.GET, requestEntity, User.class, urlVariables);
    }

    @Override
    public CheckInsResp getAllCheckIn(String token, String version) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("token", token);
        urlVariables.put("version", version);
        HttpHeaders httpHeaders = new HttpHeaders();
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("/v2/users/self/checkins?oauth_token={token}&v={version}"), HttpMethod.GET, requestEntity, CheckInsResp.class, urlVariables).getBody();
    }

    @Override
    public ResponseEntity<Token> getAccessToken(String clientId, String clientSecret, String callback, String verifyCode) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("clientId", clientId);
        urlVariables.put("clientSecret", clientSecret);
        urlVariables.put("callback", callback);
        urlVariables.put("verifyCode", verifyCode);
        HttpHeaders httpHeaders = new HttpHeaders();
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("&client_id={clientId}&client_secret={clientSecret}&redirect_uri={callback}&code={verifyCode}"), HttpMethod.GET, requestEntity, Token.class, urlVariables);
    }

    @Override
    public VenuesResp getNearestVenues(String token, double longitude, double latitude, int radius, String version) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("token", token);
        urlVariables.put("longitude", longitude);
        urlVariables.put("latitude", latitude);
        urlVariables.put("radius", radius);
        urlVariables.put("version", version);
        HttpHeaders httpHeaders = new HttpHeaders();
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("/v2/venues/search?oauth_token={token}&ll={longitude}%2C{latitude}&intent=browse&radius={radius}&v={version}"), HttpMethod.GET, requestEntity, VenuesResp.class, urlVariables).getBody();
    }

    @Override
    public ResponseEntity<CheckIn> likeCheckIn(String checkInId) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("checkInId", checkInId);
        HttpHeaders httpHeaders = new HttpHeaders();
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("/v2/checkins/{checkInId}/like"), HttpMethod.POST, requestEntity, CheckIn.class, urlVariables);
    }

}
